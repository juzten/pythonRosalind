#-----------------------------------------------------------------------------
# Name:  Justin Spain
# Email: juzten@gmail.com
# Date:  11/17/2013
# File:  001_dna.py
#-----------------------------------------------------------------------------
# Edit log
# 11/17/2013 created file and solved problem
# 
#-----------------------------------------------------------------------------
# [TODO]
# 
#-----------------------------------------------------------------------------

# Rosalind bioinformatics exercises
# Counting DNA Nucleotides
# http://rosalind.info/problems/dna/

# Problem:

# A string is simply an ordered collection of symbols selected from some alphabet and formed into a word; 
# the length of a string is the number of symbols that it contains.

# An example of a length 21 DNA string (whose alphabet contains the symbols 'A', 'C', 'G', and 'T') 
# is "ATGCTTCAGAAAGGTCTTACG."

# Given: A DNA string s of length at most 1000 nt.

# Return: Four integers (separated by spaces) counting the respective number of times that the symbols 
# 'A', 'C', 'G', and 'T' occur in s.

# Sample Dataset

# AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC
# Sample Output

# 20 12 17 21



# --notes
# no error handling if:
# 	letter in DNA_String is not a, c, g, or t
# 	upper/lowercase
# 	no option to input in DNA_String

# 
#-----------------------------------------------------------------------------
# Place any necessary functions below this.
#-----------------------------------------------------------------------------
# fucntion to print values
def printValues():
	print intA
	print intC
	print intG
	print intT
	# print DNA_String



#-----------------------------------------------------------------------------l
# Begin the main program.
#-----------------------------------------------------------------------------
# DNA string
DNA_String = 'AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC'
DNA_String2 = 'GACAACATGAGCTGTCTGCACCGAATCGTATTTAACGATGCCCAGACGCTAGTCTATTTGACCTGGGACACATTGGGTCTATGCCTGCGCGAAACGGCGACAAACCCGACGAAAATTAATCGATACTAGGTGTGTTTTCAGAGTTTGTAATTGTCGCCCGTGCCGTTCGAGGCGAAGCAGCGACCCGAGCGGTTAGTTTTAAGGCGATATGTATTCTCACTTTAGGCCTATATTTCGTCACCGCAGGACTAATGTCTTACAGTAACCTGAGAACGATCTGGCCCAACCAATCTAGCACACTCTATATTCGCCCCTCTCAGGGTCAGAGATTACATAGGATAGGCCTAGAATTCTGAGTATTGTACGGAGCTTAGATAGCATTCGGACCAATGGGTTTAGTAGGGAAGGTCGTAAGCTGTAGGCGGCTGTAACATTCCGTCGGAAGTCGCGGTCATCTAGTAGCTCGACGGATCCCTATTTAGTATACTAAACGCTACGAGTCCCCCGCTACTCGGGAACTATCGGTTTCGCGGGGGGTAATTATCATGACTGGCCGCTCGACATCTGCTCCGGCGAAGAAGGTTACAACAACGTTCGAGCGACCACCGGCAATGCCAGATAACGGGATCCACTCATCTCTATATAAAAGTATGGATCGGACACAACGCGCAGTCCCTCAACCTCAACAACGATGCCATCTACCAAAGTTATTACGAGCACCAGGTGAGCTGACGTGCCGGGAGACCACTCGGGATACTTCATGAGACTATACGAGACGAATGAACATGTAAGGACGACTTCTTGGTGACAGACTTTTTGCAAGGCTAGCAACCCTGAGGGCGCGAGGACGTGGTCACCGATTTCTCGAGGTTTCTTTATAATTTTCTTTTTTT'
DNA_String3 = 'GAAGACGACGCTCAGACCGATTGCAATTCATGGCCGCCAATACTACTGTACTCAACTCAACTGGGGCCGTGAACTCCAAATGGTACCCACCTGTCAGAGGTATGTATTCTGAGTAAACCAAGTAATTAACAGCGGATCCCCCCAAAGAGAGAGGGTGCAGGAAGGCCTTAAAGATGGTGAGCCAAACATCACTCTCCTTGCCCACCCTGGGAGTGCTCTGGGATTGGGACATATATCTGGATATTCCGACACGTCGTGTCAGGAGTTGAGCCCCCCAGTGCTAGGCAGATTCTTTTCCGAAAAGTTCTCAGAGCTCTGGTTAGTCTTATAGCCCTCGAATGGCCCTCATGGCCGACATGGCTCTACGCTACCGCCTAAGATAGTTGCTCGTTACAGGCGGTTACACCACGTCCCGAGATATGCGCCCACACGCCAAAGTTTAATTTCTCATGGGCCAGTAGTTGAGAGCATCATAATCACTAATAGATAAACACCGTGAGATAAGATCCAGCCGGAATCGAGGCGCATAAGCGCCGCTTTCCTGAGCTTACGTAGCTTCCGCGACTAGAACATAATCAAGGACCGTGTTGAGTTTCTGTCTTTCTTTGCCATCGCTCTCATCCCGTACACGAATCGCCACGCGGCAGGTGTGAGTTCCGACCGACCGTTCGCAAGTGCCTTCCCGTGTGGGTAGTAGGACCAAAGTGCGTGGCACCTGAACACCATAGAAAGGAGCCCGGGATCCTCTGACACCATTAATATCCCCTCCATGAAAAGGGTTGAGAACAATAGATCCTCCTAGCCCTGATTTGCCTATCACCGCGTGTGAATTTTGAAACCGCGCCAGGTCC'
DNA_String4 = 'ATATCAGCTAGGAGCGAGCTGCCGATGAATGGGAAAAATTGTCTTGGTGCTACGTAAACTAGACAGGAAGCACCAAAAGTTACACGACGGCGCTTACAAGCGCGCGCCCCGCTCATTGTCCCTTCACTGCCAAACGGCGAGCCCCTCGCGAGCAACAGTTAACCGTAGAGGGTAATGGAGACAGAAACTGGCTTTGTATAGAGCTTTGCCTGGGTTCTAGCTAGCTTACGCTATCCAATCATTGGATCAATAACAGCTTAGGTGGAGATTCTATTGTCCGCCCTAGAAGCCTGACCCCGCGTGTGCCTGTTAAGCAAGACACTAGTACGAGGTAATTGGTATGTGTAAACTGTTTCCGGGAATAAGGCGATGCCACCAGAAAGAGTGAATAATCGTAGTACCCCACACCGGCAGACTGCGATTGGTGTCCCAGGGCTTAACCACCCGAGCAGAAACTAAAGTTGAATCTAGCTTGACCTGGATAAAATAATTCTATCGTAGGGTAGAACAGATCTCAAGTTGTCGACGCCTTAACGACGCGGTAATCACACTCTAGGCTTGATTACTAAATTTACGGTAAGCGTTCAACGTTCGCTAAGTCGGGTTATAAGACGATGGACCGGGTACAACACAGGTCATTCAGAGTACTCTCACATGGGCATGCGGCGTCCCTTTCCATGACTGGTATGATAACCTACTAGGAACTGAGTTGCCTATTTTGCCAAAGAAACACAAGATGACAATAACCCTGATCTGCGGAGTTCCGTCCGGGTACAGGTCCTAACTTCACCGATTTTAGGACGTGGCTTACGATGCATAGGAAAACTCTAAGGAACTGCCACGATCTGAGTCTTGGTGCCAGCATACCTGTGCCCTGTACGACCAGCGATAGTGAATCCTTTGTGTGGCGCTTGTCATATCAGGGTTGGGAGGCCCATCAACAGACCCACTGCGACTTTGCT'
# 4 ints to hold number amount of A, C, G, or T values
intA, intC, intG, intT = 0, 0, 0, 0


# get length of dna string
# make loop to iterate thru dna string
# 	if dnastring char = 'A' add 1 to intA

DNA_Length = len(DNA_String)
# print DNA_Length
x = 0
while x < DNA_Length:
	if DNA_String[x] == 'A':
		intA += 1
	elif DNA_String[x] == 'C':
		intC +=1
	elif DNA_String[x] == 'G':
		intG += 1
	elif DNA_String[x] == 'T':
		intT += 1
	else:
		print 'error'

	# add 1 to x to iterate to next letter in DNS_String
	x+=1


# print values after while loop
printValues()




# test
# py.test 001_dna.py
def test_one():
	assert intA == 20
	assert intC == 12
	assert intG == 17
	assert intT == 21
